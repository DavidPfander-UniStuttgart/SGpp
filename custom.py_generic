import os

COMPILER=os.environ["SGPP_COMPILER"]
SG_COMBIGRID=0
SG_OPTIMIZATION=1
SG_FINANCE=0
SG_MISC=0
SG_PARALLEL=0
ARCH=os.environ["SGPP_PLATFORM_ARCH"]
USE_OCL=int(os.environ["SGPP_USE_OCL"])
USE_MPI=int(os.environ["SGPP_USE_MPI"])
OPT=1
SG_PYTHON=0
SG_JAVA=0
COMPILE_BOOST_PERFORMANCE_TESTS=1
RUN_BOOST_PERFORMANCE_TESTS=0
COMPILE_BOOST_TESTS=0
RUN_BOOST_TESTS=0
# boost and OpenCL
BOOST_LIBRARY_PATH=os.environ["BOOST_REPO_PATH"] + '/lib'
BOOST_INCLUDE_PATH=os.environ["BOOST_REPO_PATH"] + '/include'
USE_OCL=1
OCL_LIBRARY_PATH=os.environ["OCL_LIBRARY_PATH"]
# AutoTuneTMP (can only be enabled together with OpenCL)
USE_AUTOTUNE_TMP=1
AUTOTUNETMP_INCLUDE_PATH=os.environ["AUTOTUNETMP_REPO_PATH"] + "/AutoTuneTMP_install/include"
CPPJIT_INCLUDE_PATH=os.environ["CPPJIT_REPO_PATH"] + "/cppjit_install/include"
VC_INCLUDE_PATH=os.environ["AUTOTUNETMP_REPO_PATH"] + "/Vc_install/include"
# lshknn
USE_LSHKNN=True
LSHKNN_INCLUDE_PATH=os.environ["LSHKNN_REPO_PATH"] + "/include"
LSHKNN_LIBRARY_PATH=os.environ["LSHKNN_REPO_PATH"] + "/build"
LSHKNN_WITH_CUDA=os.environ["LSHKNN_WITH_CUDA"] == "True"
LSHKNN_WITH_OPENCL=os.environ["LSHKNN_WITH_OPENCL"] == "True"
# misc
PRINT_INSTRUCTIONS=False
RUN_CPPLINT=False
